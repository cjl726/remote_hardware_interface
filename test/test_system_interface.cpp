/*
 * OpenVMP, 2023
 *
 * Author: Roman Kuzmenko
 * Created: 2023-04-29
 *
 * Licensed under Apache License, Version 2.0.
 */

#include <gmock/gmock.h>

#include "hardware_interface/resource_manager.hpp"

const auto urdf_head =
    R"(
<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from minimal_robot.urdf.xacro       | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="MinimalRobot">
  <!-- Used for fixing robot -->
  <link name="world"/>
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="world"/>
    <child link="base_link"/>
  </joint>
  <link name="base_link">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.2" radius="0.1"/>
      </geometry>
      <material name="DarkGrey">
        <color rgba="0.4 0.4 0.4 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="1" radius="0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="joint1" type="revolute">
    <origin rpy="-1.57079632679 0 0" xyz="0 0 0.2"/>
    <parent link="base_link"/>
    <child link="link1"/>
    <limit effort="0.1" lower="-3.14159265359" upper="3.14159265359" velocity="0.2"/>
  </joint>
  <link name="link1">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="1" radius="0.1"/>
      </geometry>
      <material name="DarkGrey">
        <color rgba="0.4 0.4 0.4 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="1" radius="0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="joint2" type="revolute">
    <origin rpy="1.57079632679 0 0" xyz="0 0 0.9"/>
    <parent link="link1"/>
    <child link="link2"/>
    <limit effort="0.1" lower="-3.14159265359" upper="3.14159265359" velocity="0.2"/>
  </joint>
  <link name="link2">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="1" radius="0.1"/>
      </geometry>
      <material name="DarkGrey">
        <color rgba="0.4 0.4 0.4 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="1" radius="0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="tool_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 1"/>
    <parent link="link2"/>
    <child link="tool_link"/>
  </joint>
  <link name="tool_link">
  </link>
)";

const auto urdf_tail =
    R"(
</robot>
)";

class TestGenericSystem : public ::testing::Test {
 public:
  void test_generic_system_with_mock_sensor_commands(std::string& urdf);
  void test_generic_system_with_mimic_joint(std::string& urdf);

 protected:
  std::string hardware_system_;

  void SetUp() override {
    hardware_system_ =
        R"(
          <ros2_control name="RemoteSystem" type="system">
            <hardware>
              <plugin>remote_hardware_interface/RemoteSystemInterface</plugin>
              <param name="namespace">$(arg namespace)</param>
            </hardware>
            <joint name="joint1">
              <command_interface name="position"/>
              <state_interface name="position"/>
              <param name="initial_position">1.57</param>
            </joint>
            <joint name="joint2">
              <command_interface name="position"/>
              <state_interface name="position"/>
              <param name="initial_position">0.7854</param>
            </joint>
          </ros2_control>
        )";
  }
};

class TestableResourceManager : public hardware_interface::ResourceManager {
 public:
  friend TestGenericSystem;

  FRIEND_TEST(TestGenericSystem, hardware_system_);

  TestableResourceManager() : hardware_interface::ResourceManager() {}

  TestableResourceManager(const std::string& urdf,
                          bool validate_interfaces = true,
                          bool activate_all = false)
      : hardware_interface::ResourceManager(urdf, validate_interfaces,
                                            activate_all) {}
};

TEST_F(TestGenericSystem, hardware_system) {
  auto urdf = urdf_head + hardware_system_ + urdf_tail;
  ASSERT_NO_THROW(TestableResourceManager rm(urdf));
}